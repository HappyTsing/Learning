<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
<!--首先进行IOC配置-->
    <bean id="accountServiceImpl" class="com.wang.service.impl.AccountServiceImpl"/>
<!--进行AOP配置-->
<!-- springe中基于XML的AOP配置步骤
    1、把通知Bean也交给Spring管理
    2、使用aop:config标签表明开始AOP的配置
    3、使用aop:aspect标签表明配置切面
        id属性：给切面一个唯一标识（可以随意取名）
        ref属性：此处输入指定通知类bean的id
   4、在aop:aspect标签的内部使用对应标签来配置通知的类型
       我们现在的示例是让pringLog方法在切入点方法执行之前执行：所以是前置通知
        aop:before：表示配置前直通知
            method属性：用于指定 Loggers类中哪个方法是前置通知
            pointcut属性：用于指定切入点表达式，该表达式用于指定对业务层中哪些方法进行增强

        切入点表达式写法：
            关键字：execution(表达式)
            表达式标准格式：访问修饰符 返回值 包名.包名.类名.方法名(参数)

            省略格式：
                访问修饰符可以删除：返回值 包名.包名.类名.方法名(参数)
                返回值、类名、方法名、包名都可以用*来代替
                可以用*..来指代所有包，即相当于无数个*.（用于代替包名）
                    参数列表：
                            基本类型直接写名称   int
                            引用类型使用包名.类名   java.lang.String
                全通配写法：* *..*.*(..)

             实际开发的写法：
                切到业务层实现类下的所有方法
                  * com.wang.service.impl.*.*(..)


            -->

<!--把通知bean交给Spring管理-->
    <bean id="logger" class="com.wang.utils.Logger"/>
    <!--开始Aop的配置-->
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知的类型，并且通知方法和切入点方法的关联
                    通知类型:
                        before：前置通知
                        after-returning：后置通知
                        after-throwing：异常通知
                        after：最终通知
                    通知方法：pringLog()
                    切入点方法：saveAccount()-->

            <!--配置前置通知：在切入点方法执行之前执行-->
            <aop:before method="beforePrintLog" pointcut="execution(public void com.wang.service.impl.AccountServiceImpl.saveAccount())"/>
            <!--配置后置通知：在切入点方法执行之后执行-->
            <aop:after-returning method="afterReturningPrintLog" pointcut="execution(public void com.wang.service.impl.AccountServiceImpl.saveAccount())"/>
            <!--·以上两个通知，是在动态代理的try{
                                        前置通知
                                        invoke（即切入点函数）
                                        后置通知
                                            } -->

            <!--配置异常通知：在切入点方法执行异常后执行，即catch(Exception e){ 异常通知 }-->
            <aop:after-throwing method="afterThrowingPrintLog" pointcut="execution(public void com.wang.service.impl.AccountServiceImpl.saveAccount())"/>
            <!--配置最终通知：无论是否正常执行，都会执行，即finally{ 最终通知 }-->
            <aop:after method="afterPrintLog" pointcut="execution(public void com.wang.service.impl.AccountServiceImpl.saveAccount())"/>


            <!--此标签写在aop:aspect内部时，只能当前切面使用，写在外面时，所有切面可用！-->
            <aop:pointcut id="ptadvice" expression="execution(public void com.wang.service.impl.AccountServiceImpl.saveAccount())"/>
    <!--上述代码可写如下
    <aop:before method="beforePrintLog" pointcut-ref="ptadvice"/>
    <aop:after-returning method="afterReturningPrintLog" pointcut-ref="ptadvice"/>
    <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="ptadvice"/>
    <aop:after method="afterPrintLog" pointcut-ref="ptadvice"/>
    -->

        <!--配置环绕通知 -->
            <aop:around method="aroundPrintLog" pointcut-ref="ptadvice"/>
        </aop:aspect>
    </aop:config>
</beans>
